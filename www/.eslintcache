[{"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx":"1","/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts":"2","/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx":"3","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js":"4","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js":"5","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js":"6","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createLimitOrder.js":"7","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/withdrawLimitOrder.js":"8","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx":"9","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/MyLimitOrders.tsx":"10"},{"size":500,"mtime":1611485917504,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611485917504,"results":"13","hashOfConfig":"12"},{"size":6715,"mtime":1614021567506,"results":"14","hashOfConfig":"12"},{"size":514,"mtime":1612552964066,"results":"15","hashOfConfig":"12"},{"size":1779,"mtime":1612637631457,"results":"16","hashOfConfig":"12"},{"size":734,"mtime":1612873133222,"results":"17","hashOfConfig":"12"},{"size":1186,"mtime":1612972791138,"results":"18","hashOfConfig":"12"},{"size":299,"mtime":1612969407446,"results":"19","hashOfConfig":"12"},{"size":15219,"mtime":1614000830574,"results":"20","hashOfConfig":"12"},{"size":9188,"mtime":1614028672426,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ef2xb6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx",[],["50","51"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx",["52"],"import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SigningCosmWasmClient } from 'secretjs';\nimport ViewKeyButton from \"./Containers/ViewKeyButton\"\nimport MyLimitOrders from \"./Containers/MyLimitOrders\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CreateNewLimitOrder from \"./Containers/CreateNewLimitOrder\";\nimport axios from 'axios';\n\nconst AMM_FACTORY_ADDRESS=\"secret1ypfxpp4ev2sd9vj9ygmsmfxul25xt9cfadrxxy\"\nconst ORDERS_FACTORY_ADDRESS=\"secret19fl8pwreuqt5l6rahmn0h0j00cjfsyla3n2rcv\" \nconst SSCRT_CONTRACT_ADDRESS=\"secret1s7c6xp9wltthk5r6mmavql4xld5me3g37guhsx\"\n\nfunction App() {\n  const [client, setClient] = useState({\n    ready: false,\n    execute: null,\n    accountData: {\n      address: \"\"\n    }\n  });\n\n  const [viewKey, setViewKey] = useState({\n    ready: false,\n    value: null\n  });\n\n  const [tokensData, setTokensData] = useState<any>(null);\n  const [remountMyLimitOrdersCount, setRemountMyLimitOrdersCount] = useState<number>(0);\n\n  useEffect(() => {\n    async function init() {\n      setupKeplr(setClient);\n      const response = await axios.get(\"https://scrt-bridge-api.azurewebsites.net/tokens/?page=0&size=1000\");\n      setTokensData([...response.data.tokens,{\n        dst_address: SSCRT_CONTRACT_ADDRESS,\n        decimals: 6,\n        display_props: {\n          symbol: \"sSCRT\"\n        }\n      },{\n        dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n        decimals: 18,\n        display_props: {\n          symbol: \"sTST\"\n        }\n      },\n    ]);\n    }\n    init();\n  }, [])\n\n  const remountMyLimitOrders = () => setRemountMyLimitOrdersCount(remountMyLimitOrdersCount+1)\n\n  if(!client.ready) {\n    return <div>Loading...</div>\n  } else {\n    return (\n      <div className=\"App\">\n          <ViewKeyButton \n            ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n            client={client}\n            viewKey={viewKey}\n            setViewKey={setViewKey}\n          />\n          {\n            viewKey.value &&  \n              <div>\n                  <CreateNewLimitOrder \n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                    remountMyLimitOrders={remountMyLimitOrders}\n                  /> \n                  <MyLimitOrders \n                    key={remountMyLimitOrdersCount} // Used to force remount this component\n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                  />\n              </div>\n          }\n          \n          {\n            /*\n              <PairsAvailable \n                AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                client={client}\n                viewKey={viewKey.value}\n              />\n            */\n          }\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst setupKeplr = async (setClient: any) => {\n  // Define sleep\n  const CHAIN_ID = \"holodeck-2\";\n  \n  const sleep = (ms: number) => new Promise((accept) => setTimeout(accept, ms));\n\n  // Wait for Keplr to be injected to the page\n  while (\n    !window.keplr &&\n    !window.getOfflineSigner &&\n    !window.getEnigmaUtils\n  ) {\n    await sleep(10);\n  }\n\n  // Use a custom chain with Keplr.\n  // On mainnet we don't need this (`experimentalSuggestChain`).\n  // This works well with `enigmampc/secret-network-sw-dev`:\n  //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n  //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n  //     - `alias secretcli='docker exec -it secretdev secretcli'`\n  //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n  // On holodeck, set:\n  //     1. CHAIN_ID = \"holodeck-2\"\n  //     2. rpc = \"ttp://bootstrap.secrettestnet.io:26657\"\n  //     3. rest = \"https://bootstrap.secrettestnet.io\"\n  //     4. chainName = Whatever you like\n  // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n  await window.keplr.experimentalSuggestChain({\n    chainId: CHAIN_ID,\n    chainName: \"Local Secret Chain\",\n    rpc: \"http://bootstrap.secrettestnet.io:26657\",\n    rest: \"https://bootstrap.secrettestnet.io\",\n    bip44: {\n      coinType: 529,\n    },\n    coinType: 529,\n    stakeCurrency: {\n      coinDenom: \"SCRT\",\n      coinMinimalDenom: \"uscrt\",\n      coinDecimals: 6,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"secret\",\n      bech32PrefixAccPub: \"secretpub\",\n      bech32PrefixValAddr: \"secretvaloper\",\n      bech32PrefixValPub: \"secretvaloperpub\",\n      bech32PrefixConsAddr: \"secretvalcons\",\n      bech32PrefixConsPub: \"secretvalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    gasPriceStep: {\n      low: 0.3,\n      average: 0.45,\n      high: 0.6,\n    },\n    features: [\"secretwasm\"],\n  });\n\n  // Enable Keplr.\n  // This pops-up a window for the user to allow keplr access to the webpage.\n  await window.keplr.enable(CHAIN_ID);\n\n  // Setup SecrtJS with Keplr's OfflineSigner\n  // This pops-up a window for the user to sign on each tx we sent\n  const keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n  const accounts = await keplrOfflineSigner.getAccounts();\n\n  const execute = await new SigningCosmWasmClient(\n    \"https://bootstrap.secrettestnet.io\", // holodeck - https://bootstrap.secrettestnet.io; mainnet - user your LCD/REST provider\n    accounts[0].address,\n    window.getOfflineSigner(CHAIN_ID),\n    window.getEnigmaUtils(CHAIN_ID),\n    {\n      // 300k - Max gas units we're willing to use for init\n      init: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n      // 300k - Max gas units we're willing to use for exec\n      exec: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n    }\n  )\n\n  const accountData = await execute.getAccount(accounts[0].address);\n  \n  setClient({\n    ready: true,\n    execute,\n    accountData\n  })\n}\n\ndeclare global {\n  interface Window { keplr: any, getOfflineSigner:any, getEnigmaUtils:any }\n}\n\n\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js",[],["53","54"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js",["55"],"import getViewKey from \"../requests/getViewKey\";\nimport React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n",["56","57"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js",[],["58","59"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createLimitOrder.js",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/withdrawLimitOrder.js",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx",["60","61","62","63","64"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Form} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey,\n    remountMyLimitOrders\n}: CreateNewLimitOrderProps) => {\n    const [showCreateLimitOrderModal, setShowCreateLimitOrderModal] = useState(false);\n    const [ammFactoryPairs, setAmmFactoryPairs] = useState<any>(null);\n    const [selectedAmmFactoryPairIndex, setSelectedAmmFactoryPairIndex] = useState<any>(null)\n\n    const [createLimitOrderLoading, setCreateLimitOrderLoading] = useState<boolean>(false);\n    const [selectedAmmPriceLoading, setSelectedAmmPairPriceLoading] = useState<boolean>(false);\n    const [selectedAmmPairPrice, setSelectedAmmPairPrice] = useState<any>(null);\n    const [orderBookPair, setOrderBookPair] = useState<any>({\n        isInstanciated: null,\n        data: null\n    })\n    const [limitOrderIsBidInput, setLimitOrderIsBidInput] = useState<boolean>(true);\n    const [limitOrderAmountInput, setLimitOrderAmountInput] = useState<any>(null);\n    const [limitOrderPriceInput, setLimitOrderPriceInput] = useState<any>(null);\n\n    useEffect(() => {\n        async function init() {\n            setAmmFactoryPairs(await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                pairs: {}\n              }));\n          }\n        init()\n    }, [])\n\n    useEffect(() => {\n        async function getData() {\n            if (selectedAmmFactoryPairIndex !== null) {\n                try {\n                    const responsePromiseAMM = getAmmPrice(0);\n                    const responsePromiseOrderBook = getOrderBook();\n    \n                    const [responseAMM, responseOrderBook] = await Promise.all([responsePromiseAMM,responsePromiseOrderBook]);\n    \n                    setSelectedAmmPairPrice(responseAMM)\n                    setSelectedAmmPairPriceLoading(false)\n                    setOrderBookPair({\n                        isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                        data: responseOrderBook.secret_order_books.secret_order_book\n                    })\n                } catch(e){alert(e)}\n            }\n        }\n        getData()\n    }, [selectedAmmFactoryPairIndex])\n\n    useEffect(() => {\n        if(selectedAmmFactoryPairIndex !== null) {\n            async function getPrice() {\n                try {\n                    let price = null;\n                    if(limitOrderIsBidInput === true) {\n                        price = await getAmmPrice(0)\n                    } else {\n                        price = await getAmmPrice(1)\n                    }\n                    setSelectedAmmPairPriceLoading(false)\n                    setSelectedAmmPairPrice(price)\n                } catch(e) {\n                    alert(e)\n                }\n            }\n            getPrice()\n        }\n    },[selectedAmmFactoryPairIndex, limitOrderIsBidInput])\n\n    const getAmmPrice = async (assetIndex: number) => {\n        return client.execute.queryContractSmart(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        ...ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[assetIndex]\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[assetIndex].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const getOrderBook = async () => {\n        return client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n            secret_order_books: {\n                contract_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr\n            }\n          })\n    }\n\n    const getTokenSymbol = (address: string) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === address);\n        return (tokenData ? tokenData.display_props.symbol : address)\n    } \n\n    const displaySymbolPair = (pair: any) => {\n        const token1Address = pair.asset_infos[0].token ? pair.asset_infos[0].token.contract_addr : pair.asset_infos[0].native_token.denom;\n        const token1Data = tokensData.find((data: any) => data.dst_address === token1Address);\n        const token2Address = pair.asset_infos[1].token ? pair.asset_infos[1].token.contract_addr : pair.asset_infos[1].native_token.denom;\n        const token2Data = tokensData.find((data: any) => data.dst_address === token2Address);\n        \n        if (limitOrderIsBidInput) {\n            return (token1Data ? token1Data.display_props.symbol : token1Address) + \" / \" + (token2Data ? token2Data.display_props.symbol : token2Address)\n        } else {\n            return (token2Data ? token2Data.display_props.symbol : token2Address) + \" / \" + (token1Data ? token1Data.display_props.symbol : token1Address)\n        }\n        \n    }\n\n    const getCurrentPrice = () => {\n        if(selectedAmmPairPrice) {\n            const tokenData = tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr)\n            const otherTokenData = tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr)\n            return selectedAmmPairPrice.return_amount / Math.pow(10, tokenData.decimals) + \" \" + tokenData.display_props.symbol + \" per \" + otherTokenData.display_props.symbol\n        }\n                                    \n    }\n\n    return (\n        <div>\n            <Button onClick={() => setShowCreateLimitOrderModal(true)}>Create New Limit Order</Button>\n            <Modal show={showCreateLimitOrderModal} onHide={() => setShowCreateLimitOrderModal(false)}>\n                <Modal.Header closeButton>\n                <Modal.Title>Create Limit Order</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        ammFactoryPairs && \n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\">\n                                {\n                                    ammFactoryPairs!.pairs.map((pair: any, index: number) =>\n                                        <Dropdown.Item key={pair.contract_addr} onClick={() => {\n                                            setSelectedAmmPairPriceLoading(true)\n                                            setSelectedAmmFactoryPairIndex(index)\n                                        }}>\n                                            {\n                                                displaySymbolPair(pair)\n                                            }\n                                        </Dropdown.Item>\n                                    )\n                                }   \n                            </DropdownButton>\n                    }\n                    {\n                        selectedAmmFactoryPairIndex !== null &&\n                        <div>\n                            { displaySymbolPair(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex]) }\n                            <br/>\n                            {\n                                <Button disabled={selectedAmmPriceLoading} onClick={() => {\n                                    setSelectedAmmPairPriceLoading(true)\n                                    setLimitOrderIsBidInput(!limitOrderIsBidInput)\n                                }}> Switch </Button>\n                            }\n                            <br/>\n                            { selectedAmmPriceLoading && <Spinner animation=\"border\"/> }\n                            { !selectedAmmPriceLoading && selectedAmmPairPrice && getCurrentPrice()}\n                            <br/>\n                            <br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Price of Limit Order (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\" \n                                :\n                                `Price of Limit Order (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\"\n                            }</label><br/>\n                            <input onChange={(e) => setLimitOrderPriceInput(e.target.value)}></input><br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Amount to swap (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\" \n                                :\n                                `Amount to swap (` + getTokenSymbol(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\"\n                            }\n                            </label><br/>\n                            <input onChange={(e) => setLimitOrderAmountInput(e.target.value)}></input><br/>\n                            <br/>\n                            { orderBookPair.isInstanciated === null && <Spinner animation=\"border\"/> }\n                            { orderBookPair.isInstanciated === true && \n                                <Button onClick={async() => {\n                                        try {\n                                            if(\n                                                limitOrderAmountInput === null || limitOrderAmountInput === \"\" || limitOrderAmountInput === \"0\" ||\n                                                limitOrderPriceInput === null || limitOrderPriceInput === \"\" || limitOrderPriceInput === \"0\") {\n                                                throw Error(\"Bad Inputs\");\n                                            }   \n                                            // loading\n                                            setCreateLimitOrderLoading(true)\n                                            await client.execute.execute(\n                                                ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr,\n                                                { \n                                                    send: {\n                                                        recipient: orderBookPair.data.contract_addr,\n                                                        amount: \"\" + limitOrderAmountInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr).decimals),\n                                                        msg: btoa(JSON.stringify({\n                                                            create_limit_order: {\n                                                                is_bid: limitOrderIsBidInput,\n                                                                price: \"\" + limitOrderPriceInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr).decimals)\n                                                            }\n                                                        }))\n                                                    } \n                                                }\n                                            )\n                                            setCreateLimitOrderLoading(false)\n                                            // sair deste terminal e fazer refresh do outro\n                                            setShowCreateLimitOrderModal(false)\n                                            remountMyLimitOrders()\n                                        } catch (e) {\n                                            alert(e)\n                                            setCreateLimitOrderLoading(false)\n                                        }\n                                    }\n                                }> \n                                    {\n                                        createLimitOrderLoading ? <Spinner animation=\"border\"/> : \"Create Create Limit Order\"\n                                    }\n                                </Button>\n                            }\n                            { orderBookPair.isInstanciated === false && \n                                <Button onClick={async() => {\n                                    try {\n                                        setOrderBookPair({\n                                            isInstanciated: null,\n                                            data: null\n                                        });\n                                        const hash = await client.execute.getCodeHashByContractAddr(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr)\n                                        await client.execute.execute(ORDERS_FACTORY_ADDRESS,  { \n                                            new_secret_order_book_instanciate: {\n                                                amm_pair_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr,\n                                                amm_pair_hash: hash\n                                            } \n                                        })\n                                        const responseOrderBook = await getOrderBook();\n                                        setOrderBookPair({\n                                            isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                                            data: responseOrderBook.secret_order_books.secret_order_book\n                                        })\n                                    } catch (e) {\n                                        alert(e);\n                                        setOrderBookPair({\n                                            isInstanciated: false,\n                                            data: null\n                                        })\n                                    }\n                                }}> \n                                    Instanciate Order Book Pair\n                                </Button>\n                            }\n                        </div>\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setShowCreateLimitOrderModal(false)}>\n                    Close\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n        )\n}\n\ntype CreateNewLimitOrderProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null,\n    remountMyLimitOrders: any\n}\n\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/MyLimitOrders.tsx",["65","66","67","68","69","70"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Table} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey\n}: MyLimitOrdersProps) => {\n    const [myLimitOrders, setMyLimitOrders] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            setMyLimitOrders(await client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                user_secret_order_books: {\n                    address: client.accountData.address,\n                    viewing_key: viewKey\n                }\n              }))\n          }\n        init()\n    }, [])\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                <tr>\n                    <th>Creation Date</th>\n                    <th>Pair</th>\n                    <th>Status</th>\n                    <th>Limit Order</th>\n                    <th>Current Price</th>\n                    <th>Withdraw</th>\n                </tr>\n            </thead>\n            <tbody>\n            {!myLimitOrders && <Spinner animation=\"border\"/>}\n            {\n                myLimitOrders && myLimitOrders.user_secret_order_books.user_secret_order_book &&\n                    myLimitOrders.user_secret_order_books.user_secret_order_book.map((orderBookAddress: string) => \n                        <MyLimitOrder \n                            orderBookAddress={orderBookAddress}\n                            tokensData={tokensData}\n                            client={client}\n                            viewKey={viewKey}\n                            myLimitOrders={myLimitOrders}\n                            setMyLimitOrders={setMyLimitOrders}\n                        />)\n            }\n            </tbody>\n        </Table>\n    )\n}\n\n\nconst MyLimitOrder = ({\n    orderBookAddress,\n    tokensData,\n    client,\n    viewKey,\n    myLimitOrders,\n    setMyLimitOrders\n}: any) => {\n    const [limitOrderData, setLimitOrderData] = useState<any>(null)\n    const [orderBookTokensData, setOrderBookTokensData] = useState<any>(null)\n    const [ammPriceData, setAmmPriceData] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            const limitOrderPromise = client.execute.queryContractSmart(orderBookAddress, { \n                get_limit_order: {\n                    user_address: client.accountData.address,\n                    user_viewkey: viewKey\n                }\n              })\n\n            const orderBookTokenDataPromise = client.execute.queryContractSmart(orderBookAddress, { \n                order_book_pair_info: {}\n              })\n\n            const [limitOrder, orderBookTokenData] = await Promise.all([limitOrderPromise, orderBookTokenDataPromise]);\n\n            setLimitOrderData(limitOrder)\n            setOrderBookTokensData(orderBookTokenData)\n\n            setAmmPriceData(await getAmmPrice(limitOrder.is_bid ? 0 : 1, orderBookTokenData))\n\n            setInterval(async () => {\n                setLimitOrderData(await client.execute.queryContractSmart(orderBookAddress, { \n                    get_limit_order: {\n                        user_address: client.accountData.address,\n                        user_viewkey: viewKey\n                    }\n                  }));\n                setAmmPriceData(await getAmmPrice(limitOrder.is_bid ? 0 : 1, orderBookTokenData))\n            },6000)\n          }\n        init()\n    }, [])\n\n\n    const getAmmPrice = async (assetIndex: number, orderBookTokenData: any) => {\n        return client.execute.queryContractSmart(orderBookTokenData.amm_pair_address, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        token: {\n                            ...orderBookTokenData.assets_info[assetIndex].token,\n                            viewing_key: \"\"\n                        }\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === orderBookTokenData.assets_info[assetIndex].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const displayBalance = (index: number) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n        return Math.round(limitOrderData.balances[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n    }\n\n    const displayPrice = (type: string) => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n        if (limitOrderData.is_bid) {\n            if (type === \"order\") {\n                return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n            } else if (type === \"amm\") {\n                return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n            }\n        } else {\n            if (type === \"order\") {\n                return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + token1Data.display_props.symbol + \" per \" + token2Data.display_props.symbol \n            } else if (type === \"amm\") {\n                return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + token1Data.display_props.symbol + \" per \" + token2Data.display_props.symbol \n            }\n        }\n    }\n\n    const pairDisplay = () => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n\n        return token1Data.display_props.symbol + \" / \" + token2Data.display_props.symbol \n    }\n\n    const displayDescription = () => {\n        let buying = \"Buying \"\n        let selling = \", selling \"\n        if (limitOrderData.is_bid) {\n            const tokenDataBuy = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n            const tokenDataSell = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n            buying = buying + Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 * Math.round(limitOrderData.order_token_init_quant/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + tokenDataBuy.display_props.symbol\n            selling= selling + Math.round(limitOrderData.order_token_init_quant/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000 + \" \" + tokenDataSell.display_props.symbol\n        }\n\n        return buying + selling\n    }\n\n    const rowStyle = limitOrderData ? {\n        backgroundColor: limitOrderData.status === \"Filled\" ? \"#Cfffbc\" : \"#Fff4ad\"\n    } : undefined\n    \n    return (\n        <tr key={orderBookAddress} style={rowStyle}>\n            {limitOrderData && <td>{new Date(limitOrderData.timestamp*1000).toLocaleString()}</td>}\n            {limitOrderData && orderBookTokensData && <td>{pairDisplay()}</td>}\n            {limitOrderData && <td>{limitOrderData.status}</td>}\n            {limitOrderData && orderBookTokensData && \n                <div>\n                    {displayPrice(\"order\")} <br/><br/>\n                    {displayDescription()}\n                </div>}\n            {limitOrderData && ammPriceData && <td>{displayPrice(\"amm\")}</td>}\n            {limitOrderData && <td>{<Button onClick={ async () => {\n                try{\n                    await client.execute.execute(orderBookAddress, { \n                        withdraw_limit_order: {}\n                    })\n                    let update = {...myLimitOrders}\n                    let arr = update.user_secret_order_books.user_secret_order_book.filter((address: string) => address !== orderBookAddress)\n                    update.user_secret_order_books.user_secret_order_book = arr\n                    setMyLimitOrders(update)\n                } catch (e) {\n                    alert(\"error on widthdraw: \" + e)\n                }\n            }}>\n                Widthdraw <br/>\n                {limitOrderData && orderBookTokensData && displayBalance(0) + \"  and  \" + displayBalance(1)}\n            </Button>}</td>}\n        </tr>\n    )\n}\n\ntype MyLimitOrdersProps = {\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null\n}\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":12},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":29,"column":10,"nodeType":"83","endLine":29,"endColumn":45,"suggestions":"84"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"85"},{"ruleId":"73","replacedBy":"86"},{"ruleId":"75","severity":1,"message":"87","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":13},{"ruleId":"75","severity":1,"message":"88","line":2,"column":65,"nodeType":"77","messageId":"78","endLine":2,"endColumn":69},{"ruleId":"81","severity":1,"message":"89","line":35,"column":8,"nodeType":"83","endLine":35,"endColumn":10,"suggestions":"90"},{"ruleId":"81","severity":1,"message":"91","line":56,"column":8,"nodeType":"83","endLine":56,"endColumn":37,"suggestions":"92"},{"ruleId":"81","severity":1,"message":"93","line":76,"column":7,"nodeType":"83","endLine":76,"endColumn":58,"suggestions":"94"},{"ruleId":"75","severity":1,"message":"87","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":13},{"ruleId":"75","severity":1,"message":"95","line":2,"column":32,"nodeType":"77","messageId":"78","endLine":2,"endColumn":37},{"ruleId":"75","severity":1,"message":"96","line":2,"column":39,"nodeType":"77","messageId":"78","endLine":2,"endColumn":53},{"ruleId":"75","severity":1,"message":"97","line":2,"column":55,"nodeType":"77","messageId":"78","endLine":2,"endColumn":63},{"ruleId":"81","severity":1,"message":"98","line":23,"column":8,"nodeType":"83","endLine":23,"endColumn":10,"suggestions":"99"},{"ruleId":"81","severity":1,"message":"100","line":100,"column":8,"nodeType":"83","endLine":100,"endColumn":10,"suggestions":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["102"],["103"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ORDERS_FACTORY_ADDRESS'. Either include it or remove the dependency array.","ArrayExpression",["104"],["102"],["103"],"'Card' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has missing dependencies: 'AMM_FACTORY_ADDRESS' and 'client.execute'. Either include them or remove the dependency array. If 'setAmmFactoryPairs' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["105"],"React Hook useEffect has missing dependencies: 'getAmmPrice' and 'getOrderBook'. Either include them or remove the dependency array.",["106"],"React Hook useEffect has a missing dependency: 'getAmmPrice'. Either include it or remove the dependency array.",["107"],"'Modal' is defined but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","React Hook useEffect has missing dependencies: 'ORDERS_FACTORY_ADDRESS', 'client.accountData.address', 'client.execute', and 'viewKey'. Either include them or remove the dependency array. If 'setMyLimitOrders' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["108"],"React Hook useEffect has missing dependencies: 'client.accountData.address', 'client.execute', 'getAmmPrice', 'orderBookAddress', and 'viewKey'. Either include them or remove the dependency array. If 'setLimitOrderData' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",{"range":"122","text":"123"},"Update the dependencies array to be: [AMM_FACTORY_ADDRESS, client.execute]",{"range":"124","text":"125"},"Update the dependencies array to be: [getAmmPrice, getOrderBook, selectedAmmFactoryPairIndex]",{"range":"126","text":"127"},"Update the dependencies array to be: [selectedAmmFactoryPairIndex, limitOrderIsBidInput, getAmmPrice]",{"range":"128","text":"129"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client.accountData.address, client.execute, viewKey]",{"range":"130","text":"131"},"Update the dependencies array to be: [client.accountData.address, client.execute, getAmmPrice, orderBookAddress, viewKey]",{"range":"132","text":"133"},[932,967],"[ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",[1495,1497],"[AMM_FACTORY_ADDRESS, client.execute]",[2363,2392],"[getAmmPrice, getOrderBook, selectedAmmFactoryPairIndex]",[3019,3070],"[selectedAmmFactoryPairIndex, limitOrderIsBidInput, getAmmPrice]",[749,751],"[ORDERS_FACTORY_ADDRESS, client.accountData.address, client.execute, viewKey]",[3519,3521],"[client.accountData.address, client.execute, getAmmPrice, orderBookAddress, viewKey]"]