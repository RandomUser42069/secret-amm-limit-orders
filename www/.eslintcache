[{"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx":"1","/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts":"2","/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx":"3","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js":"4","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js":"5","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/PairsAvailable.tsx":"6","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js":"7","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createLimitOrder.js":"8","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/withdrawLimitOrder.js":"9","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx":"10"},{"size":500,"mtime":1611485917504,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611485917504,"results":"13","hashOfConfig":"12"},{"size":5797,"mtime":1613687956955,"results":"14","hashOfConfig":"12"},{"size":514,"mtime":1612552964066,"results":"15","hashOfConfig":"12"},{"size":1779,"mtime":1612637631457,"results":"16","hashOfConfig":"12"},{"size":8828,"mtime":1612969307195,"results":"17","hashOfConfig":"12"},{"size":734,"mtime":1612873133222,"results":"18","hashOfConfig":"12"},{"size":1186,"mtime":1612972791138,"results":"19","hashOfConfig":"12"},{"size":299,"mtime":1612969407446,"results":"20","hashOfConfig":"12"},{"size":5125,"mtime":1613688210498,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ef2xb6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx",[],["48","49"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx",["50","51"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js",[],["52","53"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js",["54"],"import getViewKey from \"../requests/getViewKey\";\nimport React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/PairsAvailable.tsx",["55","56","57"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner} from 'react-bootstrap'\nimport createPairOrderBook from \"../requests/createPairOrderBook\"\nimport ViewKeyButton from './ViewKeyButton';\nimport createLimitOrder from \"../requests/createLimitOrder\"\nimport withdrawLimitOrder from \"../requests/withdrawLimitOrder\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey\n}: PairsAvailableProps) => {\n    const [pairs, setPairs] = useState<PairState[]>([])\n    const [getPairsCompleted, setGetPairsCompleted] = useState<boolean>(false)\n    const [getLimitOrdersCompleted, setGetLimitOrdersCompleted] = useState<boolean>(false)\n\n    console.log(pairs)\n    useEffect(() => {\n        async function init() {\n            if (client.ready && !getPairsCompleted) {\n                let pairsState:PairState[] = [];\n\n                const pairs_response:PairsResponse  = await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                    pairs: {}\n                  });\n\n                for (let pair of pairs_response.pairs) {\n                    let newPair = {...pair};\n\n                    let promises:Promise<any>[] = []\n\n                    // Tokens Info\n                    for  (let asset of pair.asset_infos) {\n                        promises.push(client.execute.queryContractSmart(asset.token.contract_addr, { \n                            token_info: {}\n                          }))\n                    }\n\n                    // AMM Pair info\n                    promises.push(client.execute.queryContractSmart(pair.contract_addr, { \n                        simulation: {\n                            offer_asset: {\n                                info: pair.asset_infos[0],\n                                amount: \"1\"\n                            }\n                        }\n                      }))\n\n                    promises.push(client.execute.getCodeHashByContractAddr(pair.contract_addr))\n\n                    promises.push(client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                        secret_order_books: {\n                            contract_address: pair.contract_addr \n                        }\n                      }))\n                    \n                    const [\n                        token1_info_response, \n                        token2_info_response, \n                        amm_pair_response,\n                        amm_pair_hash_response,\n                        order_book_factory_response\n                    ] = await Promise.all(promises)\n\n                    newPair.asset_infos[0].token_info = token1_info_response.token_info\n                    newPair.asset_infos[0].is_native_token = newPair.asset_infos[0].native_token ? true : false\n                    newPair.asset_infos[1].token_info = token2_info_response.token_info\n                    newPair.asset_infos[1].is_native_token = newPair.asset_infos[1].native_token ? true : false\n                    newPair.current_price = (amm_pair_response.return_amount / Math.pow(10, 12)).toString()\n                    newPair.contract_hash = amm_pair_hash_response\n                    newPair.order_book_data = order_book_factory_response.secret_order_books.secret_order_book ? {\n                        contract_addr: order_book_factory_response.secret_order_books.secret_order_book.contract_addr,\n                        loading_limit_orders: true,\n                        limit_order: null,\n                    } : null\n                    pairsState.push(newPair)\n                }\n                setPairs(pairsState);\n                setGetPairsCompleted(true)\n            }\n        }\n        init();\n      }, [client])\n\n    useEffect(() => {\n        async function init() {\n            if (pairs.length > 0 && !getLimitOrdersCompleted) {\n                let updatedPairs = [...pairs];\n                for (let [i, updatedPair] of updatedPairs.entries()) {\n                    // Get my limit orders for this pair if I gave a VK\n                    if (updatedPair.order_book_data && updatedPair.order_book_data.loading_limit_orders && viewKey) {\n                        const response = await client.execute.queryContractSmart(updatedPair.order_book_data.contract_addr, { \n                            get_limit_order: {\n                                user_address: client.accountData.address,\n                                user_viewkey: viewKey\n                            }\n                          }) \n                        if (!response) {\n                            updatedPairs[i].order_book_data!.loading_limit_orders = false\n                        } else {\n                            updatedPairs[i].order_book_data!.limit_order = response\n                            updatedPairs[i].order_book_data!.loading_limit_orders = false\n                        }\n                    }\n                }\n                setPairs(updatedPairs)\n                setGetLimitOrdersCompleted(true)\n            }\n        }\n       init()\n    }, [pairs])\n\n    return (\n        <div>\n            {!getPairsCompleted && <Spinner animation=\"border\"/>}\n            {\n                pairs && pairs.map((pair,i) => \n                    <Card style={{ width: '18rem' }} key={pair.contract_addr}>\n                        <Card.Body>\n                        <Card.Title>\n                            <div>\n                                {pair.asset_infos[0].token_info.symbol + \" / \" + pair.asset_infos[1].token_info.symbol}\n                                <br/>\n                                <Button variant=\"primary\" onClick={() => {\n                                    //newPair = {...pair}\n                                }}>Switch</Button>\n                            </div>\n                            \n                        </Card.Title>\n                        <Card.Subtitle className=\"mb-2 text-muted\">{\"AMM Price: \" + pair.current_price}</Card.Subtitle>\n                        {\n                            !pair.order_book_data ? \n                                <Button variant=\"primary\" onClick={async () => {\n                                    await createPairOrderBook(client.execute, pair, ORDERS_FACTORY_ADDRESS)\n                                }}>Create Pair Order Book</Button> \n                                : pair.order_book_data.loading_limit_orders && viewKey ?\n                                    <Button variant=\"primary\"><Spinner animation=\"border\" /></Button>\n                                : !pair.order_book_data.loading_limit_orders && viewKey && !pair.order_book_data.limit_order ?\n                                    <div>\n                                        <Button variant=\"success\" style={{margin:\"5px\"}} onClick={async () => {\n                                            await createLimitOrder(client.execute,pair)\n                                        }}>Buy</Button>\n                                        <Button variant=\"danger\" style={{margin:\"5px\"}} onClick={() => {}}>Sell</Button>\n                                    </div> :\n                                        !pair.order_book_data.loading_limit_orders && viewKey && pair.order_book_data.limit_order &&\n                                            <div>\n                                                <Button variant=\"primary\" disabled>View</Button>\n                                                <Button variant=\"warning\" onClick={async () => {\n                                                    await withdrawLimitOrder(client.execute,pair)\n                                                }}>Withdraw</Button>\n                                            </div>\n                                            \n                        }\n                        </Card.Body>\n                    </Card>)\n            }\n        </div>\n    )\n}\n\ntype PairsAvailableProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    viewKey: null | string\n  }\n\ninterface PairsResponse {\n    pairs: PairState[]\n}\n\ninterface PairState {\n    asset_infos: AssetInfo[],\n    contract_addr: string,\n    contract_hash: string,\n    liquidity_token: string,\n    token_code_hash: string,\n    current_price: string,\n    order_book_data: {\n        contract_addr: string,\n        loading_limit_orders: boolean,\n        limit_order: {} | null\n    } | null\n  }\n\ninterface AssetInfo {\n    is_native_token: boolean,\n    native_token: NativeToken,\n    token: Token,\n    token_info: TokenInfo,\n}\n\ninterface NativeToken {\n    denom: string\n}\n\ninterface Token {\n    contract_addr: string,\n    token_code_hash: string,\n    viewing_key: string\n}\n\ninterface TokenInfo {\n    decimals: number,\n    name: string,\n    symbol: string,\n    total_supply: string\n}\n\n",["58","59"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js",[],["60","61"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createLimitOrder.js",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/withdrawLimitOrder.js",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx",["62","63","64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":12},{"ruleId":"70","severity":1,"message":"74","line":6,"column":8,"nodeType":"72","messageId":"73","endLine":6,"endColumn":22},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"75","severity":1,"message":"76","line":29,"column":10,"nodeType":"77","endLine":29,"endColumn":45,"suggestions":"78"},{"ruleId":"70","severity":1,"message":"79","line":4,"column":8,"nodeType":"72","messageId":"73","endLine":4,"endColumn":21},{"ruleId":"75","severity":1,"message":"80","line":85,"column":10,"nodeType":"77","endLine":85,"endColumn":18,"suggestions":"81"},{"ruleId":"75","severity":1,"message":"82","line":113,"column":8,"nodeType":"77","endLine":113,"endColumn":15,"suggestions":"83"},{"ruleId":"66","replacedBy":"84"},{"ruleId":"68","replacedBy":"85"},{"ruleId":"66","replacedBy":"84"},{"ruleId":"68","replacedBy":"85"},{"ruleId":"70","severity":1,"message":"86","line":2,"column":9,"nodeType":"72","messageId":"73","endLine":2,"endColumn":13},{"ruleId":"70","severity":1,"message":"87","line":2,"column":23,"nodeType":"72","messageId":"73","endLine":2,"endColumn":30},{"ruleId":"75","severity":1,"message":"88","line":25,"column":8,"nodeType":"77","endLine":25,"endColumn":10,"suggestions":"89"},{"ruleId":"75","severity":1,"message":"90","line":44,"column":8,"nodeType":"77","endLine":44,"endColumn":37,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'PairsAvailable' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ORDERS_FACTORY_ADDRESS'. Either include it or remove the dependency array.","ArrayExpression",["94"],"'ViewKeyButton' is defined but never used.","React Hook useEffect has missing dependencies: 'AMM_FACTORY_ADDRESS', 'ORDERS_FACTORY_ADDRESS', and 'getPairsCompleted'. Either include them or remove the dependency array.",["95"],"React Hook useEffect has missing dependencies: 'client.accountData.address', 'client.execute', 'getLimitOrdersCompleted', and 'viewKey'. Either include them or remove the dependency array.",["96"],["92"],["93"],"'Card' is defined but never used.","'Spinner' is defined but never used.","React Hook useEffect has missing dependencies: 'AMM_FACTORY_ADDRESS' and 'client.execute'. Either include them or remove the dependency array. If 'setAmmFactoryPairs' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["97"],"React Hook useEffect has missing dependencies: 'ammFactoryPairs.pairs', 'client.execute', and 'tokensData'. Either include them or remove the dependency array.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",{"range":"109","text":"110"},"Update the dependencies array to be: [AMM_FACTORY_ADDRESS, ORDERS_FACTORY_ADDRESS, client, getPairsCompleted]",{"range":"111","text":"112"},"Update the dependencies array to be: [client.accountData.address, client.execute, getLimitOrdersCompleted, pairs, viewKey]",{"range":"113","text":"114"},"Update the dependencies array to be: [AMM_FACTORY_ADDRESS, client.execute]",{"range":"115","text":"116"},"Update the dependencies array to be: [ammFactoryPairs.pairs, client.execute, selectedAmmFactoryPairIndex, tokensData]",{"range":"117","text":"118"},[932,967],"[ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",[3770,3778],"[AMM_FACTORY_ADDRESS, ORDERS_FACTORY_ADDRESS, client, getPairsCompleted]",[5106,5113],"[client.accountData.address, client.execute, getLimitOrdersCompleted, pairs, viewKey]",[907,909],"[AMM_FACTORY_ADDRESS, client.execute]",[1781,1810],"[ammFactoryPairs.pairs, client.execute, selectedAmmFactoryPairIndex, tokensData]"]