[{"/home/ubuntu/secret-amm-limit-orders/www/src/index.tsx":"1","/home/ubuntu/secret-amm-limit-orders/www/src/reportWebVitals.ts":"2","/home/ubuntu/secret-amm-limit-orders/www/src/App.tsx":"3","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js":"4","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx":"5","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/MyOrders.tsx":"6","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/MyActiveLimitOrders.tsx":"7","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/MyHistoryLimitOrders.tsx":"8"},{"size":500,"mtime":1617443458848,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1617443458848,"results":"11","hashOfConfig":"10"},{"size":7687,"mtime":1617464232196,"results":"12","hashOfConfig":"10"},{"size":2249,"mtime":1617443458848,"results":"13","hashOfConfig":"10"},{"size":14707,"mtime":1617443458848,"results":"14","hashOfConfig":"10"},{"size":4305,"mtime":1617443458848,"results":"15","hashOfConfig":"10"},{"size":9762,"mtime":1617443458848,"results":"16","hashOfConfig":"10"},{"size":9167,"mtime":1617443458848,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1pxqdro",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"20"},"/home/ubuntu/secret-amm-limit-orders/www/src/index.tsx",[],["42","43"],"/home/ubuntu/secret-amm-limit-orders/www/src/reportWebVitals.ts",[],"/home/ubuntu/secret-amm-limit-orders/www/src/App.tsx",["44"],"import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SigningCosmWasmClient } from 'secretjs';\nimport ViewKeyButton from \"./Containers/ViewKeyButton\"\nimport MyOrders from \"./Containers/MyOrders\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CreateNewLimitOrder from \"./Containers/CreateNewLimitOrder\";\nimport axios from 'axios';\n\nconst AMM_FACTORY_ADDRESS=process.env.REACT_APP_AMM_FACTORY_ADDRESS || \"secret1ypfxpp4ev2sd9vj9ygmsmfxul25xt9cfadrxxy\"\nconst ORDERS_FACTORY_ADDRESS= process.env.REACT_APP_ORDERS_FACTORY_ADDRESS ||\"secret1d6g7y7hh6jwm0wudkzx8dx000q602qwuja8ssh\" \nconst SSCRT_CONTRACT_ADDRESS=\"secret1s7c6xp9wltthk5r6mmavql4xld5me3g37guhsx\"\n\nfunction App() {\n  const [client, setClient] = useState({\n    ready: false,\n    execute: null,\n    accountData: {\n      address: \"\"\n    }\n  });\n\n  const [viewKey, setViewKey] = useState({\n    ready: false,\n    value: null\n  });\n\n  const [tokensData, setTokensData] = useState<any>(null);\n  const [remountMyLimitOrdersCount, setRemountMyLimitOrdersCount] = useState<number>(0);\n\n  useEffect(() => {\n    async function init() {\n      setupKeplr(setClient);\n      try {\n        const response = await axios.get(\"https://scrt-bridge-api.azurewebsites.net/tokens/?page=0&size=1000\");\n          setTokensData([...response.data.tokens, {\n            dst_address: SSCRT_CONTRACT_ADDRESS,\n            decimals: 6,\n            display_props: {\n              symbol: \"sSCRT\"\n            }\n          },{\n            dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n            decimals: 18,\n            display_props: {\n              symbol: \"sTST\"\n            }\n          },\n        ]);\n      } catch (e) {\n        setTokensData([{\n          dst_address: \"secret1ttg5cn3mv5n9qv8r53stt6cjx8qft8ut9d66ed\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sETH\"\n          }\n        },{\n          dst_address: \"secret10zr3azpmr42vatq3pey2aaxurug0c668km6rzl\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sOCEAN\"\n          }\n        },{\n          dst_address: SSCRT_CONTRACT_ADDRESS,\n          decimals: 6,\n          display_props: {\n            symbol: \"sSCRT\"\n          }\n        },{\n          dst_address: \"secret1ha79qdkjsq7nyy8hagsggfq6zzlwshfmgfv3k0\",\n          decimals: 18,\n          display_props: {\n            symbol: \"sTST\"\n          }\n        },\n      ]);\n      }\n    }\n    init();\n  }, [])\n\n  const remountMyLimitOrders = () => setRemountMyLimitOrdersCount(remountMyLimitOrdersCount+1)\n\n  if(!client.ready) {\n    return <div>Loading...</div>\n  } else {\n    return (\n      <div className=\"App\">\n          <ViewKeyButton \n            ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n            client={client}\n            viewKey={viewKey}\n            setViewKey={setViewKey}\n          />\n          {\n            viewKey.value &&  \n              <div>\n                  <CreateNewLimitOrder \n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                    remountMyLimitOrders={remountMyLimitOrders}\n                  /> \n                  <MyOrders \n                    key={remountMyLimitOrdersCount}\n                    ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                    AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                    tokensData={tokensData}\n                    client={client}\n                    viewKey={viewKey.value}\n                    remountMyLimitOrders={remountMyLimitOrders}\n                  />\n              </div>\n          }\n          \n          {\n            /*\n              <PairsAvailable \n                AMM_FACTORY_ADDRESS={AMM_FACTORY_ADDRESS}\n                ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                client={client}\n                viewKey={viewKey.value}\n              />\n            */\n          }\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n\nconst setupKeplr = async (setClient: any) => {\n  // Define sleep\n  const CHAIN_ID = \"holodeck-2\";\n  \n  const sleep = (ms: number) => new Promise((accept) => setTimeout(accept, ms));\n\n  // Wait for Keplr to be injected to the page\n  while (\n    !window.keplr &&\n    !window.getOfflineSigner &&\n    !window.getEnigmaUtils\n  ) {\n    await sleep(10);\n  }\n\n  // Use a custom chain with Keplr.\n  // On mainnet we don't need this (`experimentalSuggestChain`).\n  // This works well with `enigmampc/secret-network-sw-dev`:\n  //     - https://hub.docker.com/r/enigmampc/secret-network-sw-dev\n  //     - Run a local chain: `docker run -it --rm -p 26657:26657 -p 26656:26656 -p 1337:1337 -v $(shell pwd):/root/code --name secretdev enigmampc/secret-network-sw-dev`\n  //     - `alias secretcli='docker exec -it secretdev secretcli'`\n  //     - Store a contract: `docker exec -it secretdev secretcli tx compute store /root/code/contract.wasm.gz --from a --gas 10000000 -b block -y`\n  // On holodeck, set:\n  //     1. CHAIN_ID = \"holodeck-2\"\n  //     2. rpc = \"ttp://bootstrap.secrettestnet.io:26657\"\n  //     3. rest = \"https://bootstrap.secrettestnet.io\"\n  //     4. chainName = Whatever you like\n  // For more examples, go to: https://github.com/chainapsis/keplr-example/blob/master/src/main.js\n  await window.keplr.experimentalSuggestChain({\n    chainId: CHAIN_ID,\n    chainName: \"Local Secret Chain\",\n    rpc: \"http://bootstrap.secrettestnet.io:26657\",\n    rest: \"https://bootstrap.secrettestnet.io\",\n    bip44: {\n      coinType: 529,\n    },\n    coinType: 529,\n    stakeCurrency: {\n      coinDenom: \"SCRT\",\n      coinMinimalDenom: \"uscrt\",\n      coinDecimals: 6,\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: \"secret\",\n      bech32PrefixAccPub: \"secretpub\",\n      bech32PrefixValAddr: \"secretvaloper\",\n      bech32PrefixValPub: \"secretvaloperpub\",\n      bech32PrefixConsAddr: \"secretvalcons\",\n      bech32PrefixConsPub: \"secretvalconspub\",\n    },\n    currencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: \"SCRT\",\n        coinMinimalDenom: \"uscrt\",\n        coinDecimals: 6,\n      },\n    ],\n    gasPriceStep: {\n      low: 0.3,\n      average: 0.45,\n      high: 0.6,\n    },\n    features: [\"secretwasm\"],\n  });\n\n  // Enable Keplr.\n  // This pops-up a window for the user to allow keplr access to the webpage.\n  await window.keplr.enable(CHAIN_ID);\n\n  // Setup SecrtJS with Keplr's OfflineSigner\n  // This pops-up a window for the user to sign on each tx we sent\n  const keplrOfflineSigner = window.getOfflineSigner(CHAIN_ID);\n  const accounts = await keplrOfflineSigner.getAccounts();\n\n  const execute = await new SigningCosmWasmClient(\n    \"https://bootstrap.secrettestnet.io\", // holodeck - https://bootstrap.secrettestnet.io; mainnet - user your LCD/REST provider\n    accounts[0].address,\n    window.getOfflineSigner(CHAIN_ID),\n    window.getEnigmaUtils(CHAIN_ID),\n    {\n      // 300k - Max gas units we're willing to use for init\n      init: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n      // 300k - Max gas units we're willing to use for exec\n      exec: {\n        amount: [{ amount: \"500000\", denom: \"uscrt\" }],\n        gas: \"500000\",\n      },\n    }\n  )\n\n  const accountData = await execute.getAccount(accounts[0].address);\n  \n  setClient({\n    ready: true,\n    execute,\n    accountData\n  })\n}\n\ndeclare global {\n  interface Window { keplr: any, getOfflineSigner:any, getEnigmaUtils:any }\n}\n\n\n","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js",["45"],"import React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n\nconst { fromUtf8 } = require(\"@iov/encoding\");\n\n// eslint-disable-next-line import/no-anonymous-default-export\nconst getViewKey = async (client, tokenAddress) => {\n    let handleMsg = { create_viewing_key: {entropy: \"1321313123\"} };\n    const response = await client.execute(tokenAddress, handleMsg);\n    const apiKey = JSON.parse(fromUtf8(response.data))\n    if (apiKey.create_viewing_key) {\n      return apiKey.create_viewing_key.key\n    } else if (apiKey.viewing_key) {\n      return apiKey.viewing_key.key\n    }\n  }",["46","47"],"/home/ubuntu/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx",["48","49","50","51","52"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Form, Nav} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey,\n    remountMyLimitOrders\n}: CreateNewLimitOrderProps) => {\n    const [showCreateLimitOrderModal, setShowCreateLimitOrderModal] = useState(false);\n    const [secretOrderBooks, setSecretOrderBooks] = useState<any>(null);\n    const [selectedAmmFactoryPairIndex, setSelectedAmmFactoryPairIndex] = useState<any>(null)\n\n    const [createLimitOrderLoading, setCreateLimitOrderLoading] = useState<boolean>(false);\n    const [selectedAmmPriceLoading, setSelectedAmmPairPriceLoading] = useState<boolean>(false);\n    const [selectedAmmPairPrice, setSelectedAmmPairPrice] = useState<any>(null);\n\n    const [limitOrderIsBidInput, setLimitOrderIsBidInput] = useState<boolean>(true);\n    const [limitOrderAmountInput, setLimitOrderAmountInput] = useState<any>(null);\n    const [limitOrderPriceInput, setLimitOrderPriceInput] = useState<any>(null);\n\n    useEffect(() => {\n        async function init() {\n            const response = await client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                secret_order_books: {}\n              })\n            setSecretOrderBooks(response.secret_order_books);\n            /*setAmmFactoryPairs(await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                pairs: {}\n              }));*/\n          }\n        init()\n    }, [])\n\n    useEffect(() => {\n        async function getData() {\n            if (selectedAmmFactoryPairIndex !== null) {\n                try {\n                    const responsePromiseAMM = getAmmPrice();\n                    //const responsePromiseOrderBook = getOrderBook();\n    \n                    const [responseAMM] = await Promise.all([responsePromiseAMM]);\n    \n                    setSelectedAmmPairPrice(responseAMM)\n                    setSelectedAmmPairPriceLoading(false)\n                    /*setOrderBookPair({\n                        isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                        data: responseOrderBook.secret_order_books.secret_order_book\n                    })*/\n                } catch(e){alert(e)}\n            }\n        }\n        getData()\n    }, [selectedAmmFactoryPairIndex])\n\n    const getAmmPrice = async () => {\n        return client.execute.queryContractSmart(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].amm_pair_contract_addr, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        token: {\n                            ...secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[0].token,\n                            viewing_key: \"\"\n                        }\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    /*const getOrderBook = async () => {\n        return client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n            secret_order_books: {\n                contract_address: secretOrderBooks.secretOrderBooks[selectedAmmFactoryPairIndex].contract_addr\n            }\n          })\n    }*/\n\n    const getTokenSymbol = (address: string) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === address);\n        return (tokenData ? tokenData.display_props.symbol : address)\n    } \n\n    const displaySymbolPair = (pair: any) => {\n        const token1Address = pair.asset_infos[0].token ? pair.asset_infos[0].token.contract_addr : pair.asset_infos[0].native_token.denom;\n        const token1Data = tokensData.find((data: any) => data.dst_address === token1Address);\n        const token2Address = pair.asset_infos[1].token ? pair.asset_infos[1].token.contract_addr : pair.asset_infos[1].native_token.denom;\n        const token2Data = tokensData.find((data: any) => data.dst_address === token2Address);\n        return (token1Data ? token1Data.display_props.symbol : token1Address) + \" / \" + (token2Data ? token2Data.display_props.symbol : token2Address) \n    }\n\n    const getCurrentPrice = () => {\n        if(selectedAmmPairPrice) {\n            const tokenData = tokensData.find((data: any) => data.dst_address === secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr)\n            const otherTokenData = tokensData.find((data: any) => data.dst_address === secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr)\n            return selectedAmmPairPrice.return_amount / Math.pow(10, tokenData.decimals) + \" \" + tokenData.display_props.symbol + \" per \" + otherTokenData.display_props.symbol\n        }\n                                    \n    }\n\n    console.log(tokensData && secretOrderBooks && secretOrderBooks.secret_order_books)\n\n    return (\n        <div>\n            <Button onClick={() => setShowCreateLimitOrderModal(true)}>Create New Limit Order</Button>\n            <Modal show={showCreateLimitOrderModal} onHide={() => {\n                setShowCreateLimitOrderModal(false)\n                setSelectedAmmFactoryPairIndex(null)\n            }}>\n                <Modal.Header closeButton>\n                <Modal.Title>Create Limit Order</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        tokensData && secretOrderBooks && \n                            <DropdownButton id=\"dropdown-basic-button\" title={\n                                selectedAmmFactoryPairIndex !== null ? \n                                    displaySymbolPair(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex])\n                                : \"Select Pair...\"\n                            }>\n                                {\n                                    secretOrderBooks!.secret_order_books.map((pair: any, index: number) =>\n                                        <Dropdown.Item key={pair.contract_addr} onClick={() => {\n                                            setSelectedAmmPairPriceLoading(true)\n                                            setSelectedAmmFactoryPairIndex(index)\n                                        }}>\n                                            {\n                                                displaySymbolPair(pair)\n                                            }\n                                        </Dropdown.Item>\n                                    )\n                                }   \n                            </DropdownButton>\n                    }\n                    {\n                        selectedAmmFactoryPairIndex !== null &&\n                        <div>\n                            <br/>\n                            { selectedAmmPriceLoading && <Spinner animation=\"border\"/> }\n                            { !selectedAmmPriceLoading && selectedAmmPairPrice && getCurrentPrice()}\n                            <br/>\n                            <br/>\n                            <Button style={{marginRight: \"20px\"}} variant={limitOrderIsBidInput ? \"success\" : \"light\"} onClick={() => { setLimitOrderIsBidInput(true)}}> \n                                    Buy \n                            </Button>\n                            <Button variant={!limitOrderIsBidInput ? \"danger\" : \"light\"} onClick={() => { setLimitOrderIsBidInput(false)}}> \n                                    Sell \n                            </Button>\n                            <br/>\n                            <br/>\n                            <label>{`Price of Limit Order (` + getTokenSymbol(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\"}</label><br/>\n                            <input onChange={(e) => setLimitOrderPriceInput(e.target.value)}></input><br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Deposit Amount (` + getTokenSymbol(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\" \n                                :\n                                `Deposit Amount (` + getTokenSymbol(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\"\n                            }\n                            </label><br/>\n                            <input onChange={(e) => setLimitOrderAmountInput(e.target.value)}></input><br/>\n                            <label>{\n                                limitOrderIsBidInput ?\n                                `Expected Amount (` + getTokenSymbol(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr) + \")\" \n                                :\n                                `Expected Amount (` + getTokenSymbol(secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr) + \")\"\n                            }\n                            </label><br/>\n                            <input disabled value={\n                                limitOrderAmountInput && limitOrderPriceInput ? \n                                    (\n                                        limitOrderIsBidInput ? (\"\" + limitOrderAmountInput/limitOrderPriceInput)\n                                        : (\"\" + limitOrderAmountInput*limitOrderPriceInput)\n                                    )\n                                : \"\"\n                            }></input><br/>\n                            <br/>\n                            { \n                                <Button \n                                    style={{width: \"100%\"}}\n                                    variant={limitOrderIsBidInput ? \"success\" : \"danger\"}\n                                    onClick={async() => {\n                                        try {\n                                            if(\n                                                limitOrderAmountInput === null || limitOrderAmountInput === \"\" || limitOrderAmountInput === \"0\" ||\n                                                limitOrderPriceInput === null || limitOrderPriceInput === \"\" || limitOrderPriceInput === \"0\") {\n                                                throw Error(\"Bad Inputs\");\n                                            }   \n\n                                            const limitOrderExpectedAmount: any = \n                                                limitOrderIsBidInput ? (\"\" + limitOrderAmountInput/limitOrderPriceInput)\n                                                    : (\"\" + limitOrderAmountInput*limitOrderPriceInput)\n                                            // loading\n                                            setCreateLimitOrderLoading(true)\n                                            await client.execute.execute(\n                                                secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr,\n                                                { \n                                                    send: {\n                                                        recipient: secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].contract_addr,\n                                                        amount: \"\" + Math.floor(limitOrderAmountInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 1 : 0].token.contract_addr).decimals)),\n                                                        msg: btoa(JSON.stringify({\n                                                            create_limit_order: {\n                                                                is_bid: limitOrderIsBidInput,\n                                                                price: \"\" + Math.floor(limitOrderPriceInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr).decimals)),\n                                                                expected_amount: \"\" + Math.floor(limitOrderExpectedAmount*Math.pow(10, tokensData.find((data: any) => data.dst_address === secretOrderBooks.secret_order_books[selectedAmmFactoryPairIndex].asset_infos[limitOrderIsBidInput ? 0 : 1].token.contract_addr).decimals)),\n                                                            }\n                                                        }))\n                                                    } \n                                                }\n                                            )\n                                            setCreateLimitOrderLoading(false)\n                                            // sair deste e fazer refresh do outro\n                                            setShowCreateLimitOrderModal(false)\n                                            setSelectedAmmFactoryPairIndex(null)\n                                            remountMyLimitOrders()\n                                        } catch (e) {\n                                            alert(e)\n                                            setCreateLimitOrderLoading(false)\n                                        }\n                                    }\n                                }> \n                                    {\n                                        createLimitOrderLoading ? <Spinner animation=\"border\"/> : limitOrderIsBidInput ? \"Buy\" : \"Sell\"\n                                    }\n                                </Button>\n                            }\n                        </div>\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => {\n                    setSelectedAmmFactoryPairIndex(null)\n                    setShowCreateLimitOrderModal(false)\n                }}>\n                    Close\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n        )\n}\n\ntype CreateNewLimitOrderProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null,\n    remountMyLimitOrders: any\n}\n\n","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/MyOrders.tsx",["53","54","55","56","57","58"],"import React, { useState, useEffect } from \"react\";\nimport MyActiveLimitOrders from \"./MyActiveLimitOrders\"\nimport MyHistoryLimitOrders from \"./MyHistoryLimitOrders\"\n\nimport {\n    Card,\n    Button,\n    Spinner,\n    Modal,\n    DropdownButton,\n    Dropdown,\n    Table,\n} from \"react-bootstrap\";\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    remountMyLimitOrders,\n    tokensData,\n    client,\n    viewKey,\n}: any) => {\n    const [secretOrderBooks, setSecretOrderBooks] = useState<any>(null);\n    const [selectedFactoryPairIndex, setSelectedFactoryPairIndex] = useState<any>(\n        null\n    );\n\n    useEffect(() => {\n        async function init() {\n            const response = await client.execute.queryContractSmart(\n                ORDERS_FACTORY_ADDRESS,\n                {\n                    secret_order_books: {},\n                }\n            );\n            setSecretOrderBooks(response.secret_order_books);\n        }\n        init();\n    }, []);\n\n    const displaySymbolPair = (pair: any) => {\n        const token1Address = pair.asset_infos[0].token\n            ? pair.asset_infos[0].token.contract_addr\n            : pair.asset_infos[0].native_token.denom;\n        const token1Data = tokensData.find(\n            (data: any) => data.dst_address === token1Address\n        );\n        const token2Address = pair.asset_infos[1].token\n            ? pair.asset_infos[1].token.contract_addr\n            : pair.asset_infos[1].native_token.denom;\n        const token2Data = tokensData.find(\n            (data: any) => data.dst_address === token2Address\n        );\n        return (\n            (token1Data ? token1Data.display_props.symbol : token1Address) +\n            \" / \" +\n            (token2Data ? token2Data.display_props.symbol : token2Address)\n        );\n    };\n\n    return (\n        <div>\n            <br/><br/>\n            {\n                tokensData && secretOrderBooks && (\n                    <DropdownButton\n                        id=\"dropdown-basic-button\"\n                        title={\n                            selectedFactoryPairIndex !== null\n                                ? displaySymbolPair(\n                                    secretOrderBooks.secret_order_books[selectedFactoryPairIndex]\n                                )\n                                : \"Select Pair...\"\n                        }\n                    >\n                        {secretOrderBooks!.secret_order_books.map(\n                            (pair: any, index: number) => (\n                                <Dropdown.Item\n                                    key={pair.contract_addr}\n                                    onClick={() => {\n                                        setSelectedFactoryPairIndex(index);\n                                    }}\n                                >\n                                    {displaySymbolPair(pair)}\n                                </Dropdown.Item>\n                            )\n                        )}\n                    </DropdownButton>\n                )}\n            <br/>\n            {\n                selectedFactoryPairIndex !== null && \n                    <MyActiveLimitOrders \n                        key={\"active_\" + selectedFactoryPairIndex}\n                        remountMyLimitOrders={remountMyLimitOrders}\n                        ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                        tokensData={tokensData}\n                        client={client}\n                        viewKey={viewKey}\n                        pair={secretOrderBooks.secret_order_books[selectedFactoryPairIndex]}\n                    />\n            }\n            <br />\n            <br />\n            <br />\n            {\n                    selectedFactoryPairIndex !== null && <MyHistoryLimitOrders \n                      key={\"history_\" + selectedFactoryPairIndex}\n                      remountMyLimitOrders={remountMyLimitOrders}\n                      ORDERS_FACTORY_ADDRESS={ORDERS_FACTORY_ADDRESS}\n                      tokensData={tokensData}\n                      client={client}\n                      viewKey={viewKey}\n                      pair={secretOrderBooks.secret_order_books[selectedFactoryPairIndex]}\n                    />\n            }\n        </div>\n    );\n};\n","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/MyActiveLimitOrders.tsx",["59","60","61","62","63","64","65","66"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Table} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    remountMyLimitOrders,\n    tokensData,\n    client,\n    viewKey,\n    pair\n}: MyLimitOrdersProps) => {\n    const [activelimitOrderData, setActiveLimitOrderData] = useState<any>(null)\n    const [historyLimitOrdersData, setHistoryLimitOrdersData] = useState<any>(null)\n    const [orderBookTokensData, setOrderBookTokensData] = useState<any>(null)\n    const [ammPriceData, setAmmPriceData] = useState<any>(null)\n    \n    useEffect(() => {\n        async function init() {\n            const limitOrderPromise = client.execute.queryContractSmart(pair.contract_addr, { \n                get_active_limit_order: {\n                    user_address: client.accountData.address,\n                    user_viewkey: viewKey,\n                    //limit: PAGINATION_LIMIT,\n                    //offset: PAGINATION_OFFSET\n                }\n              })\n\n            const orderBookTokenDataPromise = client.execute.queryContractSmart(pair.contract_addr, { \n                order_book_pair_info: {}\n              })\n\n            const [limitOrder, orderBookTokenData] = await Promise.all([limitOrderPromise, orderBookTokenDataPromise]);\n\n            setActiveLimitOrderData(limitOrder.active_limit_order.active_limit_order)\n            setOrderBookTokensData(orderBookTokenData.order_book_pair)\n            setAmmPriceData(await getAmmPrice(orderBookTokenData.order_book_pair))\n\n            setInterval(async () => {\n                const limitOrder = await client.execute.queryContractSmart(pair.contract_addr, { \n                    get_active_limit_order: {\n                        user_address: client.accountData.address,\n                        user_viewkey: viewKey,\n                        //limit: PAGINATION_LIMIT,\n                        //offset: PAGINATION_OFFSET\n                    }\n                  })\n                setActiveLimitOrderData(limitOrder.active_limit_order.active_limit_order);\n                setAmmPriceData(await getAmmPrice(orderBookTokenData.order_book_pair))\n            },12000)\n          }\n        init()\n    }, [])\n\n    const getAmmPrice = async (orderBookTokenData: any) => {\n        return client.execute.queryContractSmart(orderBookTokenData.amm_pair_address, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        token: {\n                            ...orderBookTokenData.assets_info[0].token,\n                            viewing_key: \"\"\n                        }\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === orderBookTokenData.assets_info[0].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const displayBalance = (index: number, limitOrderData:any, is_withdrew: boolean | null = null) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n        if (!is_withdrew) {\n            return Math.round(limitOrderData.balances[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n        } else {\n            return Math.round(limitOrderData.withdrew_balance[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n        }\n    }\n\n    const displayPrice = (type: string, limitOrderData: any) => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n        if (type === \"order\") {\n            return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n        } else if (type === \"amm\") {\n            return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n        } else if (type === \"triggered\") {\n            if (limitOrderData.is_bid) {\n                return (Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000) / (Math.round(limitOrderData.balances[0]/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000) + \" \" +  token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol\n            } else {\n                return (Math.round(limitOrderData.balances[1]/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000) / (Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000) + \" \" +  token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol\n            }\n        }\n    }\n\n    const pairDisplay = () => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n\n        return token1Data.display_props.symbol + \" / \" + token2Data.display_props.symbol \n    }\n\n    const findTokenData = (index: number) => \n        tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n\n    const getDepositedAmount = (limitOrderData: any) => {\n        const index = limitOrderData.is_bid ? 1 : 0;\n        const amount = Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000;\n\n        return \"Deposited: \" + amount + \" \" + findTokenData(index).display_props.symbol\n    }\n\n    const getExpectedAmount = (limitOrderData: any) => {\n        const index = limitOrderData.is_bid ? 0 : 1;\n        const amount = Math.round(limitOrderData.expected_amount/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000;\n\n        return \"Expected (~): \" + amount + \" \" + findTokenData(index).display_props.symbol\n    }\n\n    const rowStyle = activelimitOrderData ? {\n        backgroundColor: activelimitOrderData.status === \"Filled\" ? \"#Cfffbc\" : \"#Fff4ad\"\n    } : undefined\n\n    return (\n        <div>\n            ACTIVE ORDERS\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Creation Date</th>\n                        <th>Pair</th>\n                        <th>Type</th>\n                        <th>Status</th>\n                        <th>Limit Order</th>\n                        <th>Triggered Price</th>\n                        <th>Current Price</th>\n                        <th>Cancel</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {\n                    activelimitOrderData && \n                    <tr key={pair.contract_addr} style={rowStyle}>\n                        <td>{new Date(activelimitOrderData.timestamp*1000).toLocaleString()}</td>\n                        {orderBookTokensData && tokensData && <td>{pairDisplay()}</td>}\n                        <td>{activelimitOrderData.is_bid ? \"Buy\" : \"Sell\"}</td>\n                        <td>{activelimitOrderData.status}</td>\n                        {orderBookTokensData && \n                            <div>\n                                {displayPrice(\"order\",activelimitOrderData)} <br/><br/>\n                                {getDepositedAmount(activelimitOrderData)}<br/>\n                                {getExpectedAmount(activelimitOrderData)}\n                            </div>}\n                        {<td>{\n                            <div>\n                                {\n                                    ammPriceData && \n                                    activelimitOrderData.status === \"Filled\" ? \n                                    displayPrice(\"triggered\", activelimitOrderData)\n                                    : \" - \"}\n                            </div>\n                        }</td>}\n                        {<td>{ammPriceData ? displayPrice(\"amm\", activelimitOrderData) : \" - \"}</td>}\n                        {activelimitOrderData && <td>{<Button onClick={ async () => {\n                            try{\n                                await client.execute.execute(pair.contract_addr, { \n                                    cancel_limit_order: {}\n                                })\n                                remountMyLimitOrders()\n                            } catch (e) {\n                                alert(\"error on widthdraw: \" + e)\n                            }\n                        }}>\n                            Widthdraw <br/>\n                            {activelimitOrderData && orderBookTokensData && displayBalance(0, activelimitOrderData) + \"  and  \" + displayBalance(1, activelimitOrderData)}\n                        </Button>}</td>}\n                    </tr>\n                }\n                </tbody>\n            </Table>\n        </div>\n        \n    )\n}\n\ntype MyLimitOrdersProps = {\n    ORDERS_FACTORY_ADDRESS: string,\n    remountMyLimitOrders: any,\n    client: any,\n    tokensData: any,\n    viewKey: string | null,\n    pair: any\n}\n","/home/ubuntu/secret-amm-limit-orders/www/src/Containers/MyHistoryLimitOrders.tsx",["67","68","69","70","71","72","73"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown, Table} from 'react-bootstrap'\n\nconst PAGINATION_LIMIT = 10;\nconst PAGINATION_OFFSET = 0;\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    remountMyLimitOrders,\n    tokensData,\n    client,\n    viewKey,\n    pair\n}: MyLimitOrdersProps) => {\n    const [historyLimitOrdersData, setHistoryLimitOrdersData] = useState<any>(null)\n    const [orderBookTokensData, setOrderBookTokensData] = useState<any>(null)\n    const [ammPriceData, setAmmPriceData] = useState<any>(null)\n\n    useEffect(() => {\n        async function init() {\n            const limitOrderPromise = client.execute.queryContractSmart(pair.contract_addr, { \n                get_history_limit_orders: {\n                    user_address: client.accountData.address,\n                    user_viewkey: viewKey,\n                    page_size: PAGINATION_LIMIT,\n                    page: PAGINATION_OFFSET\n                }\n              })\n\n            const orderBookTokenDataPromise = client.execute.queryContractSmart(pair.contract_addr, { \n                order_book_pair_info: {}\n              })\n\n            const [limitOrder, orderBookTokenData] = await Promise.all([limitOrderPromise, orderBookTokenDataPromise]);\n\n            setHistoryLimitOrdersData(limitOrder.history_limit_orders.history_limit_orders)\n            setOrderBookTokensData(orderBookTokenData.order_book_pair)\n            setAmmPriceData(await getAmmPrice(orderBookTokenData.order_book_pair))\n\n            setInterval(async () => {\n                const limitOrder = await client.execute.queryContractSmart(pair.contract_addr, { \n                    get_history_limit_orders: {\n                        user_address: client.accountData.address,\n                        user_viewkey: viewKey,\n                        page_size: PAGINATION_LIMIT,\n                        page: PAGINATION_OFFSET\n                    }\n                  })\n                setHistoryLimitOrdersData(limitOrder.history_limit_orders.history_limit_orders);\n                setAmmPriceData(await getAmmPrice(orderBookTokenData.order_book_pair))\n            },12000)\n          }\n        init()\n    }, [])\n\n    const getAmmPrice = async (orderBookTokenData: any) => {\n        return client.execute.queryContractSmart(orderBookTokenData.amm_pair_address, { \n            simulation: {\n                offer_asset: {\n                    info: {\n                        token: {\n                            ...orderBookTokenData.assets_info[0].token,\n                            viewing_key: \"\"\n                        }\n                    },\n                    amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === orderBookTokenData.assets_info[0].token.contract_addr).decimals)\n                }\n            }\n          })\n    }\n\n    const displayBalance = (index: number, limitOrderData:any, is_withdrew: boolean | null = null) => {\n        const tokenData = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n        if (!is_withdrew) {\n            return Math.round(limitOrderData.balances[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n        } else {\n            return Math.round(limitOrderData.withdrew_balance[index]/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000 + \" \" + tokenData.display_props.symbol\n        }\n    }\n\n    const displayPrice = (type: string, limitOrderData: any) => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n        if (type === \"order\") {\n            return Math.round(limitOrderData.price/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n        } else if (type === \"amm\") {\n            return Math.round(ammPriceData.return_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000 + \" \" + token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol \n        } else if (type === \"triggered\") {\n            if (limitOrderData.withdrew_balance) {\n                if (limitOrderData.is_bid) {\n                    return (Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000) / (Math.round(limitOrderData.withdrew_balance[0]/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000) + \" \" +  token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol\n                } else {\n                    return (Math.round(limitOrderData.withdrew_balance[1]/Math.pow(10,orderBookTokensData.assets_info[1].decimal_places) * 100000) / 100000) / (Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[0].decimal_places) * 100000) / 100000) + \" \" +  token2Data.display_props.symbol + \" per \" + token1Data.display_props.symbol\n                }\n            } else {\n                return \"-\"\n            }\n        }\n    }\n\n    const pairDisplay = () => {\n        const token1Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[0].token.contract_addr);\n        const token2Data = tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[1].token.contract_addr);\n\n        return token1Data.display_props.symbol + \" / \" + token2Data.display_props.symbol \n    }\n\n    const findTokenData = (index: number) => \n        tokensData.find((data: any) => data.dst_address === orderBookTokensData.assets_info[index].token.contract_addr);\n\n    const getDepositedAmount = (limitOrderData: any) => {\n        const index = limitOrderData.is_bid ? 1 : 0;\n        const amount = Math.round(limitOrderData.deposit_amount/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000;\n\n        return \"Deposited: \" + amount + \" \" + findTokenData(index).display_props.symbol\n    }\n\n    const getExpectedAmount = (limitOrderData: any) => {\n        const index = limitOrderData.is_bid ? 0 : 1;\n        const amount = Math.round(limitOrderData.expected_amount/Math.pow(10,orderBookTokensData.assets_info[index].decimal_places) * 100000) / 100000;\n\n        return \"Expected (~): \" + amount + \" \" + findTokenData(index).display_props.symbol\n    }\n\n    return (\n        <div>\n            HISTORY ORDERS\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Creation Date</th>\n                        <th>Pair</th>\n                        <th>Type</th>\n                        <th>Status</th>\n                        <th>Limit Order</th>\n                        <th>Triggered Price</th>\n                        <th>Withdraw</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {\n                historyLimitOrdersData && historyLimitOrdersData.length > 0 && \n                    historyLimitOrdersData.map((history_order:any) => \n                        <tr key={history_order.timestamp}>\n                            <td>{new Date(history_order.timestamp*1000).toLocaleString()}</td>\n                            {orderBookTokensData && tokensData && <td>{pairDisplay()}</td>}\n                            <td>{history_order.is_bid ? \"Buy\" : \"Sell\"}</td>\n                            <td>{history_order.status}</td>\n                            {orderBookTokensData && \n                                <div>\n                                    {displayPrice(\"order\", history_order)} <br/><br/>\n                                    {getDepositedAmount(history_order)}<br/>\n                                    {getExpectedAmount(history_order)}\n                                </div>}\n                            {<td>{\n                                <div>\n                                    {\n                                        ammPriceData && \n                                        history_order.status === \"Withdrew\" ? \n                                        displayPrice(\"triggered\", history_order)\n                                        : \" - \"}\n                                </div>\n                            }</td>}\n                            {<td>Withdrew:  {history_order.withdrew_balance && orderBookTokensData && displayBalance(0, history_order, true) + \"  and  \" + displayBalance(1, history_order, true)}</td>}\n                        </tr>\n                    )\n            }\n                </tbody>\n            </Table>\n        </div>\n        \n    )\n}\n\ntype MyLimitOrdersProps = {\n    ORDERS_FACTORY_ADDRESS: string,\n    remountMyLimitOrders: any,\n    client: any,\n    tokensData: any,\n    viewKey: string | null,\n    pair: any\n}\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":12},{"ruleId":"82","severity":1,"message":"83","line":28,"column":10,"nodeType":"84","endLine":28,"endColumn":45,"suggestions":"85"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"86","line":2,"column":9,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},{"ruleId":"78","severity":1,"message":"87","line":2,"column":65,"nodeType":"80","messageId":"81","endLine":2,"endColumn":69},{"ruleId":"78","severity":1,"message":"88","line":2,"column":71,"nodeType":"80","messageId":"81","endLine":2,"endColumn":74},{"ruleId":"82","severity":1,"message":"89","line":36,"column":8,"nodeType":"84","endLine":36,"endColumn":10,"suggestions":"90"},{"ruleId":"82","severity":1,"message":"91","line":57,"column":8,"nodeType":"84","endLine":57,"endColumn":37,"suggestions":"92"},{"ruleId":"78","severity":1,"message":"86","line":6,"column":5,"nodeType":"80","messageId":"81","endLine":6,"endColumn":9},{"ruleId":"78","severity":1,"message":"93","line":7,"column":5,"nodeType":"80","messageId":"81","endLine":7,"endColumn":11},{"ruleId":"78","severity":1,"message":"94","line":8,"column":5,"nodeType":"80","messageId":"81","endLine":8,"endColumn":12},{"ruleId":"78","severity":1,"message":"95","line":9,"column":5,"nodeType":"80","messageId":"81","endLine":9,"endColumn":10},{"ruleId":"78","severity":1,"message":"96","line":12,"column":5,"nodeType":"80","messageId":"81","endLine":12,"endColumn":10},{"ruleId":"82","severity":1,"message":"89","line":39,"column":8,"nodeType":"84","endLine":39,"endColumn":10,"suggestions":"97"},{"ruleId":"78","severity":1,"message":"86","line":2,"column":9,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},{"ruleId":"78","severity":1,"message":"94","line":2,"column":23,"nodeType":"80","messageId":"81","endLine":2,"endColumn":30},{"ruleId":"78","severity":1,"message":"95","line":2,"column":32,"nodeType":"80","messageId":"81","endLine":2,"endColumn":37},{"ruleId":"78","severity":1,"message":"98","line":2,"column":39,"nodeType":"80","messageId":"81","endLine":2,"endColumn":53},{"ruleId":"78","severity":1,"message":"99","line":2,"column":55,"nodeType":"80","messageId":"81","endLine":2,"endColumn":63},{"ruleId":"78","severity":1,"message":"100","line":14,"column":12,"nodeType":"80","messageId":"81","endLine":14,"endColumn":34},{"ruleId":"78","severity":1,"message":"101","line":14,"column":36,"nodeType":"80","messageId":"81","endLine":14,"endColumn":61},{"ruleId":"82","severity":1,"message":"102","line":53,"column":8,"nodeType":"84","endLine":53,"endColumn":10,"suggestions":"103"},{"ruleId":"78","severity":1,"message":"86","line":2,"column":9,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},{"ruleId":"78","severity":1,"message":"93","line":2,"column":15,"nodeType":"80","messageId":"81","endLine":2,"endColumn":21},{"ruleId":"78","severity":1,"message":"94","line":2,"column":23,"nodeType":"80","messageId":"81","endLine":2,"endColumn":30},{"ruleId":"78","severity":1,"message":"95","line":2,"column":32,"nodeType":"80","messageId":"81","endLine":2,"endColumn":37},{"ruleId":"78","severity":1,"message":"98","line":2,"column":39,"nodeType":"80","messageId":"81","endLine":2,"endColumn":53},{"ruleId":"78","severity":1,"message":"99","line":2,"column":55,"nodeType":"80","messageId":"81","endLine":2,"endColumn":63},{"ruleId":"82","severity":1,"message":"102","line":55,"column":8,"nodeType":"84","endLine":55,"endColumn":10,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ORDERS_FACTORY_ADDRESS'. Either include it or remove the dependency array.","ArrayExpression",["107"],"'Card' is defined but never used.","'Form' is defined but never used.","'Nav' is defined but never used.","React Hook useEffect has missing dependencies: 'ORDERS_FACTORY_ADDRESS' and 'client.execute'. Either include them or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'getAmmPrice'. Either include it or remove the dependency array.",["109"],"'Button' is defined but never used.","'Spinner' is defined but never used.","'Modal' is defined but never used.","'Table' is defined but never used.",["110"],"'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'historyLimitOrdersData' is assigned a value but never used.","'setHistoryLimitOrdersData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'client.accountData.address', 'client.execute', 'getAmmPrice', 'pair.contract_addr', and 'viewKey'. Either include them or remove the dependency array.",["111"],["112"],"no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"115","fix":"119"},{"desc":"120","fix":"121"},{"desc":"120","fix":"122"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",{"range":"123","text":"124"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client.execute]",{"range":"125","text":"126"},"Update the dependencies array to be: [getAmmPrice, selectedAmmFactoryPairIndex]",{"range":"127","text":"128"},{"range":"129","text":"126"},"Update the dependencies array to be: [client.accountData.address, client.execute, getAmmPrice, pair.contract_addr, viewKey]",{"range":"130","text":"131"},{"range":"132","text":"131"},[883,918],"[ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",[1603,1605],"[ORDERS_FACTORY_ADDRESS, client.execute]",[2432,2461],"[getAmmPrice, selectedAmmFactoryPairIndex]",[1014,1016],[2293,2295],"[client.accountData.address, client.execute, getAmmPrice, pair.contract_addr, viewKey]",[2280,2282]]