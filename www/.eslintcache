[{"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx":"1","/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts":"2","/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx":"3","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js":"4","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js":"5","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/PairsAvailable.tsx":"6","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js":"7"},{"size":500,"mtime":1611485917504,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1611485917504,"results":"10","hashOfConfig":"9"},{"size":4872,"mtime":1612872828910,"results":"11","hashOfConfig":"9"},{"size":514,"mtime":1612552964066,"results":"12","hashOfConfig":"9"},{"size":1779,"mtime":1612637631457,"results":"13","hashOfConfig":"9"},{"size":7925,"mtime":1612695272531,"results":"14","hashOfConfig":"9"},{"size":734,"mtime":1612873133222,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ef2xb6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx",[],["34","35"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx",["36"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js",[],["37","38"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js",["39"],"import getViewKey from \"../requests/getViewKey\";\nimport React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/PairsAvailable.tsx",["40","41","42"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner} from 'react-bootstrap'\nimport createPairOrderBook from \"../requests/createPairOrderBook\"\nimport ViewKeyButton from './ViewKeyButton';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey\n}: PairsAvailableProps) => {\n    const [pairs, setPairs] = useState<PairState[]>([])\n    const [getPairsCompleted, setGetPairsCompleted] = useState<boolean>(false)\n    const [getLimitOrdersCompleted, setGetLimitOrdersCompleted] = useState<boolean>(false)\n\n    useEffect(() => {\n        async function init() {\n            if (client.ready && !getPairsCompleted) {\n                let pairsState:PairState[] = [];\n\n                const pairs_response:PairsResponse  = await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                    pairs: {}\n                  });\n\n                for (let pair of pairs_response.pairs) {\n                    let newPair = {...pair};\n\n                    let promises:Promise<any>[] = []\n\n                    // Tokens Info\n                    for  (let asset of pair.asset_infos) {\n                        promises.push(client.execute.queryContractSmart(asset.token.contract_addr, { \n                            token_info: {}\n                          }))\n                    }\n\n                    // AMM Pair info\n                    promises.push(client.execute.queryContractSmart(pair.contract_addr, { \n                        simulation: {\n                            offer_asset: {\n                                info: pair.asset_infos[0],\n                                amount: \"1\"\n                            }\n                        }\n                      }))\n\n                    promises.push(client.execute.getCodeHashByContractAddr(pair.contract_addr))\n\n                    promises.push(client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                        secret_order_books: {\n                            contract_address: pair.contract_addr \n                        }\n                      }))\n                    \n                    const [\n                        token1_info_response, \n                        token2_info_response, \n                        amm_pair_response,\n                        amm_pair_hash_response,\n                        order_book_factory_response\n                    ] = await Promise.all(promises)\n\n                    newPair.asset_infos[0].token_info = token1_info_response.token_info\n                    newPair.asset_infos[0].is_native_token = newPair.asset_infos[0].native_token ? true : false\n                    newPair.asset_infos[1].token_info = token2_info_response.token_info\n                    newPair.asset_infos[1].is_native_token = newPair.asset_infos[1].native_token ? true : false\n                    newPair.current_price = (amm_pair_response.return_amount / Math.pow(10, 12)).toString()\n                    newPair.contract_hash = amm_pair_hash_response\n                    newPair.order_book_data = order_book_factory_response.secret_order_books.secret_order_book ? {\n                        contract_addr: order_book_factory_response.secret_order_books.secret_order_book.contract_addr,\n                        loading_limit_orders: true,\n                        limit_order: null,\n                    } : null\n                    pairsState.push(newPair)\n                }\n                setPairs(pairsState);\n                setGetPairsCompleted(true)\n            }\n        }\n        init();\n      }, [client])\n\n    useEffect(() => {\n        async function init() {\n            if (pairs.length > 0 && !getLimitOrdersCompleted) {\n                let updatedPairs = [...pairs];\n                for (let [i, updatedPair] of updatedPairs.entries()) {\n                    // Get my limit orders for this pair if I gave a VK\n                    if (updatedPair.order_book_data && updatedPair.order_book_data.loading_limit_orders && viewKey) {\n                        const response = await client.execute.queryContractSmart(updatedPair.order_book_data.contract_addr, { \n                            get_limit_order: {\n                                user_address: client.accountData.address,\n                                user_viewkey: viewKey\n                            }\n                          }) \n                        if (!response) {\n                            updatedPairs[i].order_book_data!.loading_limit_orders = false\n                        }\n                    }\n                }\n                setPairs(updatedPairs)\n                setGetLimitOrdersCompleted(true)\n            }\n        }\n       init()\n    }, [pairs])\n\n    return (\n        <div>\n            {!getPairsCompleted && <Spinner animation=\"border\"/>}\n            {\n                pairs && pairs.map((pair,i) => \n                    <Card style={{ width: '18rem' }} key={pair.contract_addr}>\n                        <Card.Body>\n                        <Card.Title>\n                            <div>\n                                {pair.asset_infos[0].token_info.symbol + \" / \" + pair.asset_infos[1].token_info.symbol}\n                                <br/>\n                                <Button variant=\"primary\" onClick={() => {\n                                    //newPair = {...pair}\n                                }}>Switch</Button>\n                            </div>\n                            \n                        </Card.Title>\n                        <Card.Subtitle className=\"mb-2 text-muted\">{\"AMM Price: \" + pair.current_price}</Card.Subtitle>\n                        {\n                            !pair.order_book_data ? \n                                <Button variant=\"primary\" onClick={async () => {\n                                    await createPairOrderBook(client.execute, pair, ORDERS_FACTORY_ADDRESS)\n                                }}>Create Pair Order Book</Button> \n                                : pair.order_book_data.loading_limit_orders && viewKey ?\n                                    <Button variant=\"primary\"><Spinner animation=\"border\" /></Button>\n                                : !pair.order_book_data.loading_limit_orders && viewKey && !pair.order_book_data.limit_order ?\n                                    <div>\n                                        <Button variant=\"success\" style={{margin:\"5px\"}} onClick={() => {}}>Buy</Button>\n                                        <Button variant=\"danger\" style={{margin:\"5px\"}} onClick={() => {}}>Sell</Button>\n                                    </div> :\n                                        !pair.order_book_data.loading_limit_orders && viewKey && pair.order_book_data.limit_order &&\n                                            <Button variant=\"primary\" disabled>View</Button>\n                        }\n                        </Card.Body>\n                    </Card>)\n            }\n        </div>\n    )\n}\n\ntype PairsAvailableProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    viewKey: null | string\n  }\n\ninterface PairsResponse {\n    pairs: PairState[]\n}\n\ninterface PairState {\n    asset_infos: AssetInfo[],\n    contract_addr: string,\n    contract_hash: string,\n    liquidity_token: string,\n    token_code_hash: string,\n    current_price: string,\n    order_book_data: {\n        contract_addr: string,\n        loading_limit_orders: boolean,\n        limit_order: {} | null\n    } | null\n  }\n\ninterface AssetInfo {\n    is_native_token: boolean,\n    native_token: NativeToken,\n    token: Token,\n    token_info: TokenInfo,\n}\n\ninterface NativeToken {\n    denom: string\n}\n\ninterface Token {\n    contract_addr: string,\n    token_code_hash: string,\n    viewing_key: string\n}\n\ninterface TokenInfo {\n    decimals: number,\n    name: string,\n    symbol: string,\n    total_supply: string\n}\n\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":8,"nodeType":"49","messageId":"50","endLine":2,"endColumn":12},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"51","severity":1,"message":"52","line":29,"column":10,"nodeType":"53","endLine":29,"endColumn":45,"suggestions":"54"},{"ruleId":"47","severity":1,"message":"55","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":21},{"ruleId":"51","severity":1,"message":"56","line":82,"column":10,"nodeType":"53","endLine":82,"endColumn":18,"suggestions":"57"},{"ruleId":"51","severity":1,"message":"58","line":107,"column":8,"nodeType":"53","endLine":107,"endColumn":15,"suggestions":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ORDERS_FACTORY_ADDRESS'. Either include it or remove the dependency array.","ArrayExpression",["62"],"'ViewKeyButton' is defined but never used.","React Hook useEffect has missing dependencies: 'AMM_FACTORY_ADDRESS', 'ORDERS_FACTORY_ADDRESS', and 'getPairsCompleted'. Either include them or remove the dependency array.",["63"],"React Hook useEffect has missing dependencies: 'client.accountData.address', 'client.execute', 'getLimitOrdersCompleted', and 'viewKey'. Either include them or remove the dependency array.",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",{"range":"71","text":"72"},"Update the dependencies array to be: [AMM_FACTORY_ADDRESS, ORDERS_FACTORY_ADDRESS, client, getPairsCompleted]",{"range":"73","text":"74"},"Update the dependencies array to be: [client.accountData.address, client.execute, getLimitOrdersCompleted, pairs, viewKey]",{"range":"75","text":"76"},[932,967],"[ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",[3623,3631],"[AMM_FACTORY_ADDRESS, ORDERS_FACTORY_ADDRESS, client, getPairsCompleted]",[4752,4759],"[client.accountData.address, client.execute, getLimitOrdersCompleted, pairs, viewKey]"]