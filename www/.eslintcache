[{"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx":"1","/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts":"2","/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx":"3","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js":"4","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js":"5","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js":"6","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createLimitOrder.js":"7","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/withdrawLimitOrder.js":"8","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx":"9","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/MyLimitOrders.tsx":"10"},{"size":500,"mtime":1611485917504,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1611485917504,"results":"13","hashOfConfig":"12"},{"size":6206,"mtime":1613771414808,"results":"14","hashOfConfig":"12"},{"size":514,"mtime":1612552964066,"results":"15","hashOfConfig":"12"},{"size":1779,"mtime":1612637631457,"results":"16","hashOfConfig":"12"},{"size":734,"mtime":1612873133222,"results":"17","hashOfConfig":"12"},{"size":1186,"mtime":1612972791138,"results":"18","hashOfConfig":"12"},{"size":299,"mtime":1612969407446,"results":"19","hashOfConfig":"12"},{"size":9210,"mtime":1613770241905,"results":"20","hashOfConfig":"12"},{"size":7062,"mtime":1613774455434,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"ef2xb6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/fabio/Projects/secret-amm-limit-orders/www/src/index.tsx",[],["47","48"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/reportWebVitals.ts",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/App.tsx",["49"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/getViewKey.js",[],["50","51"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/ViewKeyButton.js",["52"],"import getViewKey from \"../requests/getViewKey\";\nimport React, {useState,useEffect} from 'react';\nimport {Spinner, Button} from \"react-bootstrap\"\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    ORDERS_FACTORY_ADDRESS,\n    client,\n    viewKey,\n    setViewKey\n}) => {\n    const [loading, setLoading] = useState(false)\n\n    useEffect(() => {\n        if (client.ready && !viewKey.ready) {\n          const viewKeys = localStorage.getItem(\"vk\");\n          if (viewKeys && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS] && JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]) {\n            setViewKey({\n              ready: true,\n              value: JSON.parse(viewKeys)[ORDERS_FACTORY_ADDRESS][client.accountData.address]\n            })\n          } else {\n            setViewKey({\n              ready: true,\n              value: null\n            })\n          }\n        }\n      }, [client, setViewKey, viewKey.ready])\n      \n    if (viewKey.ready && !viewKey.value) {\n        return (\n            <Button variant=\"primary\" onClick={async() => {\n                setLoading(true)\n                try {\n                    const response = await getViewKey(client.execute, ORDERS_FACTORY_ADDRESS)\n                    localStorage.setItem(\"vk\",JSON.stringify({[ORDERS_FACTORY_ADDRESS]: {[client.accountData.address]: response}}))\n                    setViewKey({\n                      ready: true,\n                      value: response\n                    })\n                } catch {}\n                setLoading(false)\n              }}>\n                  {\n                    loading ? <Spinner animation=\"border\" /> : \"Create View Key\"\n                  }\n            </Button>\n        )\n    } else {\n        return null\n    }\n}\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createPairOrderBook.js",[],["53","54"],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/createLimitOrder.js",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/requests/withdrawLimitOrder.js",[],"/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/CreateNewLimitOrder.tsx",["55","56","57"],"import React, {useState,useEffect} from 'react';\nimport {Card, Button, Spinner, Modal, DropdownButton, Dropdown} from 'react-bootstrap'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ({\n    AMM_FACTORY_ADDRESS,\n    ORDERS_FACTORY_ADDRESS,\n    tokensData,\n    client,\n    viewKey\n}: CreateNewLimitOrderProps) => {\n    const [showCreateLimitOrderModal, setShowCreateLimitOrderModal] = useState(false);\n    const [ammFactoryPairs, setAmmFactoryPairs] = useState<any>(null);\n    const [selectedAmmFactoryPairIndex, setSelectedAmmFactoryPairIndex] = useState<any>(null)\n    \n    const [selectedAmmPairPrice, setSelectedAmmPairPrice] = useState<any>(null);\n    const [orderBookPair, setOrderBookPair] = useState<any>({\n        isInstanciated: null,\n        data: null\n    })\n    const [limitOrderAmountInput, setLimitOrderAmountInput] = useState<any>(null);\n    const [limitOrderPriceInput, setLimitOrderPriceInput] = useState<any>(null);\n\n    useEffect(() => {\n        async function init() {\n            setAmmFactoryPairs(await client.execute.queryContractSmart(AMM_FACTORY_ADDRESS, { \n                pairs: {}\n              }));\n          }\n        init()\n    }, [])\n\n    useEffect(() => {\n        async function getData() {\n            if (selectedAmmFactoryPairIndex !== null) {\n                const responsePromiseAMM = client.execute.queryContractSmart(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr, { \n                    simulation: {\n                        offer_asset: {\n                            info: {\n                                ...ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0]\n                            },\n                            amount: \"\" + Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr).decimals)\n                        }\n                    }\n                  })\n                const responsePromiseOrderBook = client.execute.queryContractSmart(ORDERS_FACTORY_ADDRESS, { \n                    secret_order_books: {\n                        contract_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr\n                    }\n                  })\n\n                const [responseAMM, responseOrderBook] = await Promise.all([responsePromiseAMM,responsePromiseOrderBook]);\n\n                setSelectedAmmPairPrice(responseAMM)\n                setOrderBookPair({\n                    isInstanciated: responseOrderBook.secret_order_books.secret_order_book ? true : false,\n                    data: responseOrderBook.secret_order_books.secret_order_book\n                })\n            }\n        }\n        getData()\n    }, [selectedAmmFactoryPairIndex])\n\n    const displaySymbolPair = (pair: any) => {\n        const token1Address = pair.asset_infos[0].token ? pair.asset_infos[0].token.contract_addr : pair.asset_infos[0].native_token.denom;\n        const token1Data = tokensData.find((data: any) => data.dst_address === token1Address);\n        const token2Address = pair.asset_infos[1].token ? pair.asset_infos[1].token.contract_addr : pair.asset_infos[1].native_token.denom;\n        const token2Data = tokensData.find((data: any) => data.dst_address === token2Address);\n        \n        return (token1Data ? token1Data.display_props.symbol : token1Address) + \" / \" + (token2Data ? token2Data.display_props.symbol : token2Address)\n    }\n\n    return (\n        <div>\n            <Button onClick={() => setShowCreateLimitOrderModal(true)}>Create New Limit Order</Button>\n            <Modal show={showCreateLimitOrderModal} onHide={() => setShowCreateLimitOrderModal(false)}>\n                <Modal.Header closeButton>\n                <Modal.Title>Create Limit Order</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {\n                        ammFactoryPairs && \n                            <DropdownButton id=\"dropdown-basic-button\" title=\"Dropdown button\">\n                                {\n                                    ammFactoryPairs!.pairs.map((pair: any, index: number) =>\n                                        <Dropdown.Item key={pair.contract_addr} onClick={() => setSelectedAmmFactoryPairIndex(index)}>\n                                            {\n                                                displaySymbolPair(pair)\n                                            }\n                                        </Dropdown.Item>\n                                    )\n                                }   \n                            </DropdownButton>\n                    }\n                    {\n                        selectedAmmFactoryPairIndex !== null &&\n                        <div>\n                            { displaySymbolPair(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex]) }\n                            <br/>\n                            { \n                                selectedAmmPairPrice ?\n                                    (selectedAmmPairPrice.return_amount / Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr).decimals))\n                                    :\n                                    <Spinner animation=\"border\"/>\n                                }\n                            <br/>\n                            <label>Price</label><br/>\n                            <input onChange={(e) => setLimitOrderPriceInput(e.target.value)}></input><br/>\n                            <label>Amount</label><br/>\n                            <input onChange={(e) => setLimitOrderAmountInput(e.target.value)}></input><br/>\n                            <br/>\n                            { orderBookPair.isInstanciated === null && <Spinner animation=\"border\"/> }\n                            { orderBookPair.isInstanciated === true && \n                                <Button onClick={async() => {\n                                        await client.execute.execute(\n                                            ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr,\n                                            { \n                                                send: {\n                                                    recipient: orderBookPair.data.contract_addr,\n                                                    amount: \"\" + limitOrderAmountInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[0].token.contract_addr).decimals),\n                                                    msg: btoa(JSON.stringify({\n                                                        create_limit_order: {\n                                                            is_bid: true,\n                                                            price: \"\" + limitOrderPriceInput*Math.pow(10, tokensData.find((data: any) => data.dst_address === ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].asset_infos[1].token.contract_addr).decimals)\n                                                        }\n                                                    }))\n                                                } \n                                            }\n                                        )\n                                    }\n                                        \n                                }> \n                                    Create Create Limit Order\n                                </Button>\n                            }\n                            { orderBookPair.isInstanciated === false && \n                                <Button onClick={async() => {\n                                    const hash = await client.execute.getCodeHashByContractAddr(ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr)\n                                    await client.execute.execute(ORDERS_FACTORY_ADDRESS,  { \n                                        new_secret_order_book_instanciate: {\n                                            amm_pair_address: ammFactoryPairs.pairs[selectedAmmFactoryPairIndex].contract_addr,\n                                            amm_pair_hash: hash\n                                        } \n                                    })\n                                }}> \n                                    Instanciate Order Book Pair\n                                </Button>\n                            }\n                        </div>\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setShowCreateLimitOrderModal(false)}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={() => setShowCreateLimitOrderModal(false)}>\n                    Save Changes\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n        )\n}\n\ntype CreateNewLimitOrderProps = {\n    AMM_FACTORY_ADDRESS: string,\n    ORDERS_FACTORY_ADDRESS: string,\n    client: any,\n    tokensData: any,\n    viewKey: string | null\n}\n\n","/home/fabio/Projects/secret-amm-limit-orders/www/src/Containers/MyLimitOrders.tsx",["58","59","60","61","62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":12},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"72","severity":1,"message":"73","line":29,"column":10,"nodeType":"74","endLine":29,"endColumn":45,"suggestions":"75"},{"ruleId":"64","replacedBy":"76"},{"ruleId":"66","replacedBy":"77"},{"ruleId":"68","severity":1,"message":"78","line":2,"column":9,"nodeType":"70","messageId":"71","endLine":2,"endColumn":13},{"ruleId":"72","severity":1,"message":"79","line":31,"column":8,"nodeType":"74","endLine":31,"endColumn":10,"suggestions":"80"},{"ruleId":"72","severity":1,"message":"81","line":62,"column":8,"nodeType":"74","endLine":62,"endColumn":37,"suggestions":"82"},{"ruleId":"68","severity":1,"message":"78","line":2,"column":9,"nodeType":"70","messageId":"71","endLine":2,"endColumn":13},{"ruleId":"68","severity":1,"message":"83","line":2,"column":32,"nodeType":"70","messageId":"71","endLine":2,"endColumn":37},{"ruleId":"68","severity":1,"message":"84","line":2,"column":39,"nodeType":"70","messageId":"71","endLine":2,"endColumn":53},{"ruleId":"68","severity":1,"message":"85","line":2,"column":55,"nodeType":"70","messageId":"71","endLine":2,"endColumn":63},{"ruleId":"72","severity":1,"message":"86","line":23,"column":8,"nodeType":"74","endLine":23,"endColumn":10,"suggestions":"87"},{"ruleId":"72","severity":1,"message":"88","line":105,"column":8,"nodeType":"74","endLine":105,"endColumn":10,"suggestions":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ORDERS_FACTORY_ADDRESS'. Either include it or remove the dependency array.","ArrayExpression",["92"],["90"],["91"],"'Card' is defined but never used.","React Hook useEffect has missing dependencies: 'AMM_FACTORY_ADDRESS' and 'client.execute'. Either include them or remove the dependency array. If 'setAmmFactoryPairs' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["93"],"React Hook useEffect has missing dependencies: 'ORDERS_FACTORY_ADDRESS', 'ammFactoryPairs.pairs', 'client.execute', and 'tokensData'. Either include them or remove the dependency array.",["94"],"'Modal' is defined but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","React Hook useEffect has missing dependencies: 'ORDERS_FACTORY_ADDRESS', 'client.accountData.address', 'client.execute', and 'viewKey'. Either include them or remove the dependency array. If 'setMyLimitOrders' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["95"],"React Hook useEffect has missing dependencies: 'client.accountData.address', 'client.execute', 'orderBookAddress', 'tokensData', and 'viewKey'. Either include them or remove the dependency array. If 'setAmmPriceData' needs the current value of 'client.execute', you can also switch to useReducer instead of useState and read 'client.execute' in the reducer.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",{"range":"107","text":"108"},"Update the dependencies array to be: [AMM_FACTORY_ADDRESS, client.execute]",{"range":"109","text":"110"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, ammFactoryPairs.pairs, client.execute, selectedAmmFactoryPairIndex, tokensData]",{"range":"111","text":"112"},"Update the dependencies array to be: [ORDERS_FACTORY_ADDRESS, client.accountData.address, client.execute, viewKey]",{"range":"113","text":"114"},"Update the dependencies array to be: [client.accountData.address, client.execute, orderBookAddress, tokensData, viewKey]",{"range":"115","text":"116"},[932,967],"[ORDERS_FACTORY_ADDRESS, client, setViewKey, viewKey.ready]",[1194,1196],"[AMM_FACTORY_ADDRESS, client.execute]",[2742,2771],"[ORDERS_FACTORY_ADDRESS, ammFactoryPairs.pairs, client.execute, selectedAmmFactoryPairIndex, tokensData]",[749,751],"[ORDERS_FACTORY_ADDRESS, client.accountData.address, client.execute, viewKey]",[3730,3732],"[client.accountData.address, client.execute, orderBookAddress, tokensData, viewKey]"]